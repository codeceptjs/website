---
import scenario from './icons/_scenario.svg';
import driver from './icons/_driver.svg';
import interactive from './icons/_interactive.svg';
import rich from './icons/_rich.svg';
import pageObjects from './icons/_pageObjects.svg';
import web from './icons/_web.svg';
import cucumber from './icons/_cucumber.svg';
import api from './icons/_api.svg';
import data from './icons/_data.svg';
import parallel from './icons/_parallel.svg';
import reduced from './icons/_reduced.svg';
import ai from './icons/_ai.svg';

const features = [
    {
        icon: scenario,
        title: 'Scenario Driven',
        description: 'Write tests that mirror real user scenarios and business workflows',
        link: '',
        gradient: 'from-yellow-500 to-amber-600'
    },
    {
        icon: driver,
        title: 'Driver Agnostic',
        description: 'Switch between WebDriver, Playwright, Puppeteer without changing tests',
        link: '/basics#architecture',
        gradient: 'from-purple-500 to-purple-700'
    },
    {
        icon: interactive,
        title: 'Interactive Debug',
        description: 'Pause tests and interact with the browser for real-time debugging',
        link: '/basics#debug',
        gradient: 'from-yellow-400 to-orange-500'
    },
    {
        icon: rich,
        title: 'Rich Locators',
        description: 'Find elements using text, CSS, XPath, or semantic locators',
        link: '/locators',
        gradient: 'from-purple-600 to-indigo-600'
    },
    {
        icon: pageObjects,
        title: 'PageObjects',
        description: 'Organize tests with reusable page object patterns',
        link: '/pageobjects',
        gradient: 'from-yellow-500 to-yellow-700'
    },
    {
        icon: web,
        title: 'Web & Mobile Testing',
        description: 'Test across browsers, mobile devices, and native applications',
        link: '/mobile',
        gradient: 'from-purple-500 to-purple-800'
    },
    {
        icon: cucumber,
        title: 'Cucumber-like BDD',
        description: 'Write tests in natural language with Gherkin syntax support',
        link: '/bdd',
        gradient: 'from-amber-500 to-yellow-600'
    },
    {
        icon: api,
        title: 'API Testing',
        description: 'Combine UI and API testing in a single test suite',
        link: '/api',
        gradient: 'from-purple-600 to-violet-600'
    },
    {
        icon: data,
        title: 'Data Management',
        description: 'Built-in data factories and database helpers for test data',
        link: '/data',
        gradient: 'from-yellow-600 to-orange-600'
    },
    {
        icon: parallel,
        title: 'Parallel Testing',
        description: 'Run tests in parallel across multiple browsers and environments',
        link: '/advanced#parallel-execution',
        gradient: 'from-purple-500 to-purple-700'
    },
    {
        icon: reduced,
        title: 'Reduced Flakiness',
        description: 'Smart waits and retry mechanisms for stable test execution',
        link: '/basics#beforesuite',
        gradient: 'from-yellow-500 to-amber-600'
    },
    {
        icon: ai,
        title: 'AI-powered',
        description: 'Intelligent test generation and self-healing test capabilities',
        link: '/ai',
        gradient: 'from-purple-600 to-indigo-700'
    }
];
---

{/* Features Section - Dark Theme with Animations */}
<section id="features" class="relative py-20 overflow-hidden bg-gradient-to-br from-gray-900 via-purple-900 to-indigo-900">
    {/* Animated Background Elements */}
    <div class="absolute inset-0">
        {/* Floating Orbs */}
        <div class="absolute top-10 right-20 w-64 h-64 bg-yellow-500/15 rounded-full blur-3xl animate-float opacity-50"></div>
        <div class="absolute bottom-20 left-20 w-80 h-80 bg-purple-500/15 rounded-full blur-3xl animate-float-delayed opacity-50"></div>
        <div class="absolute top-1/2 left-1/2 w-96 h-96 bg-yellow-400/10 rounded-full blur-3xl animate-float-slow opacity-40"></div>

        {/* Animated Grid */}
        <div class="absolute inset-0 bg-grid-pattern opacity-5 animate-grid-move"></div>

        {/* Floating Particles */}
        <div class="absolute inset-0">
            {[...Array(15)].map((_, i) => (
                <div
                    key={i}
                    class="absolute w-1.5 h-1.5 bg-yellow-400/20 rounded-full animate-float-particle"
                    style={{
                        left: `${Math.random() * 100}%`,
                        top: `${Math.random() * 100}%`,
                        animationDelay: `${Math.random() * 8}s`,
                        animationDuration: `${4 + Math.random() * 6}s`
                    }}
                ></div>
            ))}
        </div>

        {/* Gradient Overlay */}
        <div class="absolute inset-0 bg-gradient-to-t from-gray-900/30 via-transparent to-gray-900/30"></div>
    </div>

    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 relative">
        <div class="text-center mb-16">
            <div class="mb-8">
              <span class="inline-flex items-center px-6 py-3 rounded-full bg-gradient-to-r from-yellow-500/20 to-purple-500/20 border border-yellow-400/30 text-yellow-300 text-sm font-medium backdrop-blur-sm animate-pulse-glow">
                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-zap w-4 h-4 mr-2 animate-bounce"><polygon points="13 2 3 14 12 14 11 22 21 10 12 10 13 2"></polygon></svg>
                Comprehensive Testing Capabilities
              </span>
            </div>

            <h2 class="!mt-0 text-4xl md:text-6xl font-bold mb-6 leading-tight">
              <span class="bg-gradient-to-r from-white via-yellow-200 to-purple-200 bg-clip-text text-transparent animate-text-shimmer">
                Powerful Features
              </span>
            </h2>
            <p class="text-xl md:text-2xl text-gray-300 max-w-4xl mx-auto leading-relaxed">
                Everything you need for comprehensive end-to-end testing, from scenario-driven tests to AI-powered automation
            </p>
        </div>

        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
            {features.map((feature, index) => (
                <a href={feature.link}
                    key={index}
                    class="!mt-0 no-underline group relative bg-white/10 backdrop-blur-lg border border-white/20 rounded-2xl p-8 hover:border-yellow-400/50 transition-all duration-500 hover:transform hover:scale-105 shadow-xl hover:shadow-2xl hover:shadow-yellow-500/10 animate-fade-in-up"
                    style={{animationDelay: `${index * 0.1}s`}}
                >
                    {/* Glow Effect */}
                    <div class="absolute inset-0 bg-gradient-to-br opacity-0 group-hover:opacity-10 transition-opacity duration-500 rounded-2xl"
                         style={{backgroundImage: `linear-gradient(135deg, ${feature.gradient.split(' ')[1]}, ${feature.gradient.split(' ')[3]})`}}></div>

                    {/* Icon */}
                    <div class={`inline-flex items-center justify-center w-16 h-16 rounded-2xl bg-gradient-to-r ${feature.gradient} mb-6 group-hover:scale-110 transition-transform duration-300 shadow-lg group-hover:shadow-xl`}>
                        <feature.icon class="w-8 h-8 text-white" />
                    </div>

                    {/* Content */}
                    <h3 class="text-2xl font-bold mb-4 text-white group-hover:text-yellow-300 transition-colors">
                        {feature.title}
                    </h3>
                    <p class="text-gray-300 leading-relaxed group-hover:text-gray-200 transition-colors">
                        {feature.description}
                    </p>

                    {/* Bottom Glow Line */}
                    <div class="absolute bottom-0 left-0 w-full h-1 bg-gradient-to-r opacity-0 group-hover:opacity-100 transition-opacity duration-500 rounded-b-2xl"
                         style={{backgroundImage: `linear-gradient(90deg, ${feature.gradient.split(' ')[1]}, ${feature.gradient.split(' ')[3]})`}}></div>

                    {/* Floating Particles on Hover */}
                    <div class="absolute inset-0 opacity-0 group-hover:opacity-100 transition-opacity duration-500 pointer-events-none">
                        {[...Array(3)].map((_, i) => (
                            <div
                                key={i}
                                class="absolute w-1 h-1 bg-yellow-400/60 rounded-full animate-float-particle"
                                style={{
                                    left: `${20 + Math.random() * 60}%`,
                                    top: `${20 + Math.random() * 60}%`,
                                    animationDelay: `${Math.random() * 2}s`,
                                    animationDuration: `${2 + Math.random() * 2}s`
                                }}
                            ></div>
                        ))}
                    </div>
                </a>
            ))}
        </div>
    </div>
</section>
